@model DumperViewModel
@{
    ViewData["Title"] = "Dumper Bin";
}

<div>
    <p>Paste this URL in the browser to acess this dumper: @Html.ActionLink("Copy URL", "InsideDumper", "Dumper")</p>
</div>

<div>
    @Html.AntiForgeryToken()
    <form action="~/Dumper/UploadImages" enctype="multipart/form-data" method="post" onsubmit="UploadFile(this); return false;">
        <div class="file-upload-section">
            <label for="FileUpload_FormFile">Upload Images</label>
            <input id="FileUpload_FormFile" type="file" name="imageFiles" multiple />
            <label for="FileUpload_FormFile"><img src="~/Images/AddButtom.svg" width="32" height="32" /></label>
        </div>
        <input type="text" name="dumperName" value="@Model.DumperName" hidden />
        <input class="submit-button" type="submit" value="Upload" />
        <div>
            <output name="result"></output>
        </div>
    </form>
</div>

<div>
    @{
        if(Model.ImageURLs.Count > 0)
        {
            foreach(string imagePathURL in Model.ImageURLs)
            {
                <text>
                    <img src="@Url.Action("GetImageBytes","Dumper",new {imagePathURL})" height="100" />
                </text>
            }
        }
    }
</div>

<script>
    async function UploadFile(formElement) {
        var resultElem = formElement.elements.namedItem("result");
        const formData = new FormData(formElement);
        console.log(formData);
        try {
            const response = await fetch(formElement.action, {
                method: 'POST',
                body: formData
            });

            resultElem.value = 'Result is : ' + response.status + ' ' + response.statusText;
        } catch (err) {
            console.log("It's messed up", err);
        }
    }
</script>